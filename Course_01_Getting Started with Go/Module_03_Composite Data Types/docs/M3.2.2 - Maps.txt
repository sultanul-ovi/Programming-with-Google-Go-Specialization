So, a map is Golang's implementation of a hash table. So, a map is exactly a hash table. You can use the make function to create a map. So, we have an example here. So, first thing I'm doing, is I'm declaring idMap as a variable, a map variable. So, I say var idMap and it's going to be a map and notice it afterward the keyword map, I have in brackets the word string, that's the type of the key, and then after that I have another type and that's the type of the value. So, the key and the value can be different types. Then, the line after that, first I'm declaring idMap to be a variable then I'm actually assigning it, pointing it to a map, making an actual map and I call make for that. So, idMap equals make and then parentheses map string int. So, it creates a map. Now, at first, this make is going to create an empty map, but it creates a map. Now, another way to define a map is you can create the map with a map literal. So, you can initialize it with values, with key value pairs rather. So, I'm sure on that down here, idMap colon equals map string int and then in curly brackets I list a bunch of key value pairs, and value are separated by colons. So, in this case there's just one pair but you can have a comma separated list of key value pairs. In this case, it's Joe colon one two three. So, Joe is the key, one two three is the value. So, you can put any number of those. You can initialize it with any number of those key value pairs. Accessing maps. So, how do you access the elements in a map? At first, actually most of it is the same as the way you would access an array except the index that you use, that you put in between the square brackets, that's actually the key. So, if I want to read the value associated with the key Joe, I can say, in this case I'm doing to print, fmt.Println l idMap and then in brackets I say Joe. I give the string Joe and that will return the value associated with Joe and it'll print that. I can also add a key value pair into the map, or change an existing one if it's there. So, if I want to add some new key value pair, I could say idMap Jane, maybe there's no key Jane in there right now, I idMap Jane in brackets equals four five six. So, that puts a new key value pair in there. Now, note that would also change a key-value pair. So, let's say there was already a key value pair in there, Jane was mapped to six, seven, eight. So, if I by saying idMap Jane four five six, I am getting rid of the old key-value pair associated with Jane and I'm putting a new one in there. So, Jane is now associated with four five six. Also you can delete a key value pair from the map without overwriting it. You can just delete it completely by calling the delete function. You call delete, you pass it, the first argument is the name of the map, so idMap. Second argument is the key that you want to delete. So, in this case Joe and it will eliminate that key-value pair Joe and whatever its value is. It will eliminate that from the map. So, there are also a few more map functions. One thing that you can do with maps, is you can have a two value assignment for a map. So, for instance here, I'm saying id comma p colon equals idMap Joe. Now, when I do that assignment, if I had just done a single value assignment say, I said id colon equals idMap Joe, then ID would equal the value associated with Joe. In this case, I'm doing a two value assignment. So, the second value, id comma p that p is going to be a Boolean. It's going to be true if the key is present in the map. So, there are cases where you're interested in knowing whether that key is in the map, maybe you don't even care what the value is associated with Joe. You just want to know if Joe is in your map. So, p will be true if that key Joe in this case is in the map and really false otherwise. There's also length function you can apply it to maps and if you do, you say like here I'm saying I'm printing len of idMap, it will tell you how many key-value pairs are inside the map. Another thing which is very common to do, is to iterate through an entire map, just like iterating through an array, very common thing. You want to iterate through every key-value pair. So, what you do here is you're using basically a two value assignment with the range keyword. So, it's a for loop. So, if you look at the for loop, you got the key and then the value, key comma value and then the colon equals range on the ID map. So, what that does is every pass through the for loop, key is going to be equal to the one key inside the idMap and val is going to be equal to the corresponding value in the idMap. So, in this way, every pass, every iteration through the for-loop, will use one key and one value pair. So, key and value will be bound to a different key-value pair for every iteration to the for loop and you'll iterate through the for loop until you've gone through every key-value pair inside the idMap.