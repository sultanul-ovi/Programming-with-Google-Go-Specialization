A hash table is a data structure used in a lot of different languages, and it's very useful data structure, it allows you fast access to large bodies of data. Hash table generally contains a key value pairs, so there are a lot of values inside this hash table but each value is associated with a unique key. So, for instance, maybe social security numbers and emails, right? So, social security number might be the unique key of the person and so that might be the key and then the value might be the email address of the person. So that's a pair. The unique key and value and the key has to be unique that's actually completely important. Also maybe like GPS coordinates and address. So every address has a unique set of GPS coordinates associated with it. So GPS coordinates might be used as the key and then the address might be your house address, right? Which may or may not be unique. Where you live there a lot of different street, main streets in the world and there can be a lot of different one main streets. So that might not be unique but the GPS coordinates have to be unique or the key has to be unique in this case GPS coordinates. So, a hash table is meant to store these key value pairs, and it is important that each key is unique. So a hash function is defined and is used to take a key and compute a slot in the hash table to insert the value according to the key. So, you can think of a hash table is something like, I hate to say it, but think of it like a big array. It's got a lot of slots where you can put values in there. Now which slot puts the value in is based on the key. A hash function is used to process the key, and generate the number of the slot that you want to insert the value into. So, a hash function is a function that takes as its argument the key and it returns the slot where you want to put the value. Now by the way this hash function, you never call this hash function explicitly. This is something that goes on behind the scenes inside the Go language but just to understand there is a hash function that does this. So, here's an example of what a hash table might look like. So, at the top we've got this little table, a bunch of keys, and values. So, my keys are Joe, Jane, and Pat, they're all unique keys, their strings are unique, and there are some values x, y and z, they're arbitrary. So Joe is associated with x, Jane associated with y, Pat associated with z, and I want to put these three key value pairs into my hash table. So, if you look at the bottom you got on the right, you've got this basically an array of some size and this is a small one but this is just an example. So you got some array and the values x, y, and z are all placed in different slots inside this structure. So, and I just place them arbitrarily, Y is in location one, and X in location three, Z is in location five, right? So, they're in some arbitrary location, some slots inside the structure. Now then over on the left, you can see the keys Joe, Jane, and Pat. Now there in between there's this hash function and the hash function it takes the key and it determines which slot it is going to place the corresponding valuing in. So, I drew this within the line, so if you look at Joe, there's a blue arrow that goes into the hash function and then points to location three, slot three. So, Joe is associated with slot three which has the value x, and then Jane, the hash function will compute a one in this case. So, slot one has Jane's value y and then likewise with Pat, Pat is associated through the hash function with slot five and then you put its value z inside slot five. So, this is the idea behind a hash table. So, the reason why this is good is something like an array or slice, right? You can access things in constant time, but you don't have to use indices to access them, you can use arbitrary keys as long as the keys are all unique and constant then you can use a key. So, normally if this were an array if I want to access entry one, element one, I'd have to say the name of the array and then brackets one. In this case, I can say brackets Joe or bracket Jane or bracket Pat or something like that. So that's actually useful, the naming is useful for several reasons. One reason is, it's easier for a programmer to remember Joe, and Jane, and Pat rather than arbitrary numbers. The numbers have no particular meaning with respect to that particular application you're writing, where Joe, and Jane, and Pat, they are people and they have some sort of a meaning in the mind of the programmer. So it makes it easier to code. So, advantages. Advantages are fast lookup table than lists. So this is an advantages compared to like a list that you'd find in another language. Faster lookup in lists because in a list, it's linear time lookup. So that means if you want to find an element in a list, you have to start at the beginning of the list and go to the next, and next, and next and keep comparing until you find the one you want, find one that matches. That's linear time, the longer the list is the longer it takes to find things in the list on average. Where this is constant times much more like an array, right? Basically you take the index, the key rather, you use the hash function which takes some constant amount of time and it gives you the index and you go straight to that index. So, it's a constant time lookup rather than linear time like you would find in a list. Now, another thing about it is that you can use arbitrary key, so this is better than say slices or arrays where you would have to use integers. You can use arbitrary keys and those keys can have some sort of a meaning to them. So, disadvantages is that you may have what are called collisions inside your hash table. So collision, is when two keys hash at the same slot. So, Joe, and Jane if the hash function maps both of those to slot two, then you have a collision. Then Joe's value and James value both have to go into the same slot. Now, there are ways to handle these collisions. You can put them both in there and put them in a linked list or something like this but, when you get collisions, the speed gets a little slower, right? Because those collisions have to be handled in some way. So, you don't have to worry about how they're handled, that's built into Go, but that can slow you down but, I'll say this that collisions are rare because the hash function is made in such a way that collisions are very rare, okay? So, this is a possible disadvantages with collisions but, it's not likely to cause you many problems.