So, there's a function called "make" that can be used to make slices, and you can make other things with it too, but right now, we're going to talk about making slices. So, the one way that we made a slice, the first when we talked about making the slice, we'll just to make the underlying array, and then make the slice after it. Also, you can initialize the slice directly with a slice literal, and we talked about that. This is the third way, you make the slice directly, but you're not initializing with any particular values. So, this is common. This is when its cases like this where you want to use a slice because it has its variable size, ability, and you don't care there's an array in the back, right, but you want to initialize a slice to a particular size, so at least at the beginning. So, one thing you can do is call "make". There are two ways to call it, you call it with two arguments or three. If you call with two arguments, the first argument is the type. So, the type of the objects that they're going to be inside of the slice. So, the slice of answer, slice of strings or something like that, that would be the first argument, Int, String, and then, the second argument is going to be the length of the slice. Now, when you use "make" to make a slice, the length is equal to the capacity, because it makes the underlying array, and the array is exactly the same size of the slice. So, the length and capacity are the same. That is, anyway, when you use a two argument version of "make". So, you can see here, SLI equals make, you say a bracket int to tell the type, and then 10. So, since I gave two arguments, it figures okay. Length and capacity are the same. So, the underlying array is the same size as the slice, and the slice points to the beginning, starts at the beginning of the underlying array. Now, the three argument version of "make", instead you specify the length and the capacity separately. So, that means that the underlying array is actually bigger than the slice. So, in this case, we got SLI equals make. But, first, we give you the first argument, the type bracket int. Second argument is the length of the slice. The third argument is the capacity, which is the size of the array. So, in this case, our slice is size 10, but the array is size 15, so we can increase the slice up to size 15 if we want to. So, there's an "append" function that can be used with slices, and it's used to increase the size of a slice. So, if you want to add stuff onto the end of a slice, and increase the size of the slice in doing so, use the "append" function. Now, note that this is a key advantage compared to regular arrays that you see in regular languages. You can't just add things to the end of an array and continually increase its size, but with the slice you can. So, it adds the element, you can add one or more elements. In this case, we'll do one, but it adds the element to the end of the slice. Which means, it inserts it into the underlying array, so it increases the slice up to the capacity of the underlying array, and it increases the size of the array if necessary. So, if you reach the limits of the array size, it'll make a new underlying array that's bigger. So, append never has to stop appending. You can continually append even beyond the size of the array, and it will just increase the size of the array. You don't want to do that, there's a time penalty for that, but it'll do that. So, as an example, we make a slice, SLI, we call "make". So, the length of the slice is zero, but the length of the underlying array is three. So, then, I want to put something into the slice. So, the slice is empty, right, the size is zero. So, I say, I append the number 100 onto the slice, so I call "append". I pass the first argument, I pass the slice and the name of the slice, and the second argument is 100, that number that I want to put into the slice. So, it puts it in, in order to add that on, it has to increase the length of the slice. So, now that the slice of length will be increased to accommodate the new number that it put in there. So, that's how you would use "append" in general.